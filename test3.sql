--Write a SQL statement to create a table named pets to 
--store the information about the pets owned by the employees in the company. 
--Identify to the best of your knowledge the proper keys (primary and foreign), 
--the best data types, and any other constraints that should be considered in 
--the definition of the table. The table must contain the following columns:

-- microchip_ID: number identifying the pet. Automatically generated by the database.
-- name: name of the pet. There cannot be two pets with the same name on the table.
-- owner: identifies the pet owner, it must be one of the existing employees in the database.
-- birthdate: the birthdate of the pet. It can be unknown.
-- total_expenses: total expenses incurred in the pet's lifetime (USD currency format). It can be unknown but if there is a value, it cannot be negative.
-- last_modifed: date and time any of the information about the pet last updated.

CREATE TABLE IF NOT EXISTS pets(
	microchip_ID INT AUTO_INCREMENT NOT NULL,
	name VARCHAR(20) UNIQUE NOT NULL,
	owner INT NOT NULL,
	birthdate DATE,
	total_expenses DECIMAL(10, 2) CHECK(salary >= 0),
	last_modified DATETIME,
	PRIMARY KEY (microchip_ID),
	FOREIGN KEY (owner) REFERENCES employees(employee_id)
);

--Insert 'John Doe' <johndoe@company.com> as a new employee in the Employees table. 
--Include only the first_name, last_name, email, hire_date (today's date as a function call to MySQL to get today's date), 
--and his job whose title is 'Marketing Manager'.
--Update John Doe's salary and department and set it to $99,000 and 'Human Resources', respectively.
--Delete John Doe from the employees' table.

INSERT INTO employees(first_name, last_name, email, hire_date, job_id) VALUES("John", "Doe", "JOHNDOE", CURDATE(), 'MK_MAN');
UPDATE employees SET salary=99000, department_id=40 WHERE employee_id=207;
DELETE FROM employees WHERE employee_id=207;

--Write a query to show for each department name the average salary difference between any of the 
--employees in the department and their respective managers. Order the results by the 
--salary difference (largest to smallest). Show only the first 5 rows in the output.

SELECT department_name, e.department_id, AVG(m.salary-e.salary) difference FROM (employees e JOIN employees m ON e.manager_id = m.employee_id ) JOIN departments d ON (d.department_id = e.department_id) GROUP BY e.department_id ORDER BY difference DESC LIMIT 5;

--Write a query to find for every employee his full name (e.g. “John Smith”), 
--the department name he is working for, the number of employees in his department, 
--and the number of employees outside his department earning a higher salary than the given employee. 
--If the employee is not assigned to any department, show “No department” as the department name and 0 as 
--the number of employees on the rest of the columns.
SELECT CONCAT(first_name, ' ', last_name), c.cnt FROM employees e JOIN (SELECT department_id,  count(*) cnt FROM employees GROUP BY department_id) c USING(department_id) JOIN (SELECT department_id, count(*) FROM employees WHERE department_id <> e.department_id)

--Write a query to show for every department: the department name, the department's manager's last name, the department's location (shown as city, country as in "Rome, Italy"), the highest salary of the employees working for the department, and the number of employees in the department. Show also departments with no manager/employees as "No manager"/"No employees" in the respective columns rather than NULL / 0 values.

SELECT department_name, m.last_name, CONCAT(city, ',', country), t1.max_salary FROM (((departments JOIN employees m ON (departments.manager_id = m.employee_id)) JOIN locations USING (location_id)) JOIN countries USING (country_id)) JOIN (SELECT department_id, MAX(salary) max_salary FROM employees GROUP BY department_id) USING (department_id) AS t1;